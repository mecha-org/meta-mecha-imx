From 333b97142f4a6cba710a67b1078e2ed70f127d2d Mon Sep 17 00:00:00 2001
From: chiragp-mechas <chiragp@mechasystems.com>
Date: Mon, 27 Nov 2023 13:28:08 +0530
Subject: [PATCH] Etnaviv-debug-logs-etnaviv_drv-etnaviv_gpu

---
 drivers/gpu/drm/etnaviv/etnaviv_drv.c | 19 ++++++----
 drivers/gpu/drm/etnaviv/etnaviv_gpu.c | 50 ++++++++++++++++++++-------
 2 files changed, 50 insertions(+), 19 deletions(-)

diff --git a/drivers/gpu/drm/etnaviv/etnaviv_drv.c b/drivers/gpu/drm/etnaviv/etnaviv_drv.c
index 7dcc6392792d..2472fc3b323f 100644
--- a/drivers/gpu/drm/etnaviv/etnaviv_drv.c
+++ b/drivers/gpu/drm/etnaviv/etnaviv_drv.c
@@ -590,8 +590,9 @@ static int etnaviv_pdev_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
 	struct component_match *match = NULL;
-
+	printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 	if (!dev->platform_data) {
+		printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 		struct device_node *core_node;
 
 		for_each_compatible_node(core_node, NULL, "vivante,gc") {
@@ -602,13 +603,14 @@ static int etnaviv_pdev_probe(struct platform_device *pdev)
 						   compare_of, core_node);
 		}
 	} else {
+		printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 		char **names = dev->platform_data;
 		unsigned i;
 
 		for (i = 0; names[i]; i++)
 			component_match_add(dev, &match, compare_str, names[i]);
 	}
-
+	printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 	return component_master_add_with_match(dev, &etnaviv_master_ops, match);
 }
 
@@ -636,25 +638,27 @@ static int __init etnaviv_init(void)
 	struct device_node *np;
 
 	etnaviv_validate_init();
-
+	printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 	ret = platform_driver_register(&etnaviv_gpu_driver);
 	if (ret != 0)
 		return ret;
-
+	printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 	ret = platform_driver_register(&etnaviv_platform_driver);
 	if (ret != 0)
 		goto unregister_gpu_driver;
-
+	printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 	/*
 	 * If the DT contains at least one available GPU device, instantiate
 	 * the DRM platform device.
 	 */
+	printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 	for_each_compatible_node(np, NULL, "vivante,gc") {
 		if (!of_device_is_available(np))
 			continue;
 
 		pdev = platform_device_alloc("etnaviv", -1);
 		if (!pdev) {
+			printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 			ret = -ENOMEM;
 			of_node_put(np);
 			goto unregister_platform_driver;
@@ -671,6 +675,7 @@ static int __init etnaviv_init(void)
 
 		ret = platform_device_add(pdev);
 		if (ret) {
+			printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 			platform_device_put(pdev);
 			of_node_put(np);
 			goto unregister_platform_driver;
@@ -680,12 +685,14 @@ static int __init etnaviv_init(void)
 		of_node_put(np);
 		break;
 	}
-
+	printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 	return 0;
 
 unregister_platform_driver:
+	printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 	platform_driver_unregister(&etnaviv_platform_driver);
 unregister_gpu_driver:
+	printk("EDEBUG: %s-%d\n",__func__,__LINE__);
 	platform_driver_unregister(&etnaviv_gpu_driver);
 	return ret;
 }
diff --git a/drivers/gpu/drm/etnaviv/etnaviv_gpu.c b/drivers/gpu/drm/etnaviv/etnaviv_gpu.c
index cc5b07f86346..034ea7718018 100644
--- a/drivers/gpu/drm/etnaviv/etnaviv_gpu.c
+++ b/drivers/gpu/drm/etnaviv/etnaviv_gpu.c
@@ -166,6 +166,7 @@ int etnaviv_gpu_get_param(struct etnaviv_gpu *gpu, u32 param, u64 *value)
 
 	default:
 		DBG("%s: invalid param: %u", dev_name(gpu->dev), param);
+		printk("%s: invalid param: %u", dev_name(gpu->dev), param);
 		return -EINVAL;
 	}
 
@@ -1732,6 +1733,7 @@ static void etnaviv_gpu_unbind(struct device *dev, struct device *master,
 	struct etnaviv_gpu *gpu = dev_get_drvdata(dev);
 
 	DBG("%s", dev_name(gpu->dev));
+	printk("%s", dev_name(gpu->dev));
 
 	flush_workqueue(gpu->wq);
 	destroy_workqueue(gpu->wq);
@@ -1789,44 +1791,61 @@ static int etnaviv_gpu_platform_probe(struct platform_device *pdev)
 	mutex_init(&gpu->lock);
 	mutex_init(&gpu->fence_lock);
 
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
+
 	/* Map registers: */
 	gpu->mmio = devm_platform_ioremap_resource(pdev, 0);
-	if (IS_ERR(gpu->mmio))
+	if (IS_ERR(gpu->mmio)) {
+		printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		return PTR_ERR(gpu->mmio);
 
+	}
+
 	/* Get Interrupt: */
 	gpu->irq = platform_get_irq(pdev, 0);
-	if (gpu->irq < 0)
+	if (gpu->irq < 0) {
+		printk("EDEBUG: %d-%s\n",__LINE__,__func__);
+	
 		return gpu->irq;
 
+	}
+
 	err = devm_request_irq(&pdev->dev, gpu->irq, irq_handler, 0,
 			       dev_name(gpu->dev), gpu);
 	if (err) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		dev_err(dev, "failed to request IRQ%u: %d\n", gpu->irq, err);
 		return err;
 	}
 
 	/* Get Clocks: */
 	gpu->clk_reg = devm_clk_get_optional(&pdev->dev, "reg");
-	DBG("clk_reg: %p", gpu->clk_reg);
-	if (IS_ERR(gpu->clk_reg))
-		return PTR_ERR(gpu->clk_reg);
 
+	printk("clk_reg: %p", gpu->clk_reg);
+	if (IS_ERR(gpu->clk_reg)) {
+		printk("EDEBUG: %d-%s\n",__LINE__,__func__);
+		return PTR_ERR(gpu->clk_reg);
+	}
 	gpu->clk_bus = devm_clk_get_optional(&pdev->dev, "bus");
-	DBG("clk_bus: %p", gpu->clk_bus);
-	if (IS_ERR(gpu->clk_bus))
+	printk("clk_bus: %p", gpu->clk_bus);
+	if (IS_ERR(gpu->clk_bus)) {
+		printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		return PTR_ERR(gpu->clk_bus);
-
+	}
 	gpu->clk_core = devm_clk_get(&pdev->dev, "core");
-	DBG("clk_core: %p", gpu->clk_core);
-	if (IS_ERR(gpu->clk_core))
+	printk("clk_core: %p", gpu->clk_core);
+	if (IS_ERR(gpu->clk_core)) {
+		printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		return PTR_ERR(gpu->clk_core);
+	}
 	gpu->base_rate_core = clk_get_rate(gpu->clk_core);
 
 	gpu->clk_shader = devm_clk_get_optional(&pdev->dev, "shader");
-	DBG("clk_shader: %p", gpu->clk_shader);
-	if (IS_ERR(gpu->clk_shader))
+	printk("clk_shader: %p", gpu->clk_shader);
+	if (IS_ERR(gpu->clk_shader)) {
+		printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		return PTR_ERR(gpu->clk_shader);
+	}
 	gpu->base_rate_shader = clk_get_rate(gpu->clk_shader);
 
 	/* TODO: figure out max mapped size */
@@ -1837,16 +1856,21 @@ static int etnaviv_gpu_platform_probe(struct platform_device *pdev)
 	 * autosuspend delay is rather arbitary: no measurements have
 	 * yet been performed to determine an appropriate value.
 	 */
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
+
 	pm_runtime_use_autosuspend(gpu->dev);
 	pm_runtime_set_autosuspend_delay(gpu->dev, 200);
 	pm_runtime_enable(gpu->dev);
 
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
+
 	err = component_add(&pdev->dev, &gpu_ops);
 	if (err < 0) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		dev_err(&pdev->dev, "failed to register component: %d\n", err);
 		return err;
 	}
-
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 	return 0;
 }
 
-- 
2.25.1

